[Modules]
basic
mod-rfts

[Constraints]
stars(tuple)*
myplanet(int)
scout(int)
col(int)

[Rules]
info @ turn(X) ==> print "Turn %s" % X
mergestars @ turn(0) \ stars(Ss) and star(S) <=> F = Ss + (S,); stars(F)
startmerge @ turn(0) \ star(S1) and star(S2) <=> stars((S1,S2))
fleet(F) and name(F,"Scouting") <=> scout(F); print "Scout found with id %s"%F
fleet(F) and name(F,"Colonization") <=> col(F); print "Transport found with id %s"%F
scout @ cacheentered \ stars(Ss) and scout(Sc) <=> Ss != () | (Target,Others) = randomstar(Ss); order_move(Sc,Target); print "stars left: %s"%(Others,); stars(Others)

whoami(Me) and owner(P,Me) \ planet(P) <=> myplanet(P)

buildscouts @ cacheentered and myplanet(P) and stars(Ss) ==> len(Ss) > 10 | order_buildfleet(P,((1,1),),"Scouting")
producecolonists @ myplanet(P) ==> order_produce(P,((7,1),))
buildtransports @ myplanet(P) and resources(P,7,Num,_,_) ==> Num >= 5 | order_buildfleet(P,((3,Num),),"Colonization")

colonise @ cacheentered and contains(S,F) and contains(S,P) \ col(F) and planet(P) <=> order_colonise(F,P)
movetoplanet @ cacheentered \ col(F) and planet(P) <=> order_move(F,P)

[Functions]
import random
def randomstar(stars):
    c = random.randint(0,len(stars)-1)
    return (stars[c],stars[:c] + stars[c+1:])
