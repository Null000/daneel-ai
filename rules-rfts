[Constraints]
subtype(int,int)
name(int,unicode)
size(int,int)
pos(int,int,int,int)
vel(int,int,int,int)
contains(int,int)
owner(int,int)
#ObjID,ResType,Avail,Mine,Unavail
resources(int,int,int,int,int)
whoami(int)
turn(int)
fleet(int)
scout(int)
col(int)
planet(int)
myplanet(int)
star(int)
stars(tuple)*
order_move(int,int)
order_buildfleet(int,tuple,str)
order_produce(int,tuple)
order_colonise(int,int)
#next constraint gets added when all data from the cache has been entered into the store
#it can be used to force phases onto the rule evaluation
cacheentered

[Rules]
#TODO: perhaps these should be moved into the framework itself
fleettype @ subtype(X,4) ==> fleet(X)
planettype @ subtype(X,3) ==> planet(X)
startype @ subtype(X,2) ==> star(X)

info @ turn(X) ==> print "Turn %s" % X
mergestars @ turn(0) \ stars(Ss) and star(S) <=> F = Ss + (S,); stars(F)
startmerge @ turn(0) \ star(S1) and star(S2) <=> stars((S1,S2))
fleet(F) and name(F,"Scouting") <=> scout(F); print "Scout found with id %s"%F
fleet(F) and name(F,"Colonization") <=> col(F); print "Transport found with id %s"%F
scout @ cacheentered \ stars(Ss) and scout(Sc) <=> Ss != () | (Target,Others) = randomstar(Ss); order_move(Sc,Target); print "stars left: %s"%(Others,); stars(Others)

whoami(Me) and owner(P,Me) \ planet(P) <=> myplanet(P)

buildscouts @ cacheentered and myplanet(P) and stars(Ss) ==> len(Ss) > 10 | order_buildfleet(P,((1,1),),"Scouting")
producecolonists @ myplanet(P) ==> order_produce(P,((7,1),))
#TODO: replace A,B with _
buildtransports @ myplanet(P) and resources(P,7,Num,A,B) ==> Num >= 5 | order_buildfleet(P,((3,Num),),"Colonization")

colonise @ cacheentered and contains(S,F) and contains(S,P) \ col(F) and planet(P) <=> order_colonise(F,P)
movetoplanet @ cacheentered \ col(F) and planet(P) <=> order_move(F,P)

[Functions]
import random
def randomstar(stars):
    c = random.randint(0,len(stars)-1)
    return (stars[c],stars[:c] + stars[c+1:])
