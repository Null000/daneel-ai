#! /usr/bin/python

import time
import random
from optparse import OptionParser

import tp.client.threads
from tp.netlib.client import url2bits
from tp.netlib import Connection
from tp.netlib import failed, constants, objects
from tp.client.cache import Cache
from tp.netlib.objects import OrderDescs

from rulesystem import RuleSystem,BoundConstraint

version = (0, 0, 1)

def callback(*args, **kw):
    #print args, kw
    pass

def connect(uri='tp://daneel-ai:cannonfodder@localhost/tp'):
    debug = False

    host, username, game, password = url2bits(uri)
    if not game is None:
        username = "%s@%s" % (username, game)

    connection = Connection()

    # Download the entire universe
    if connection.setup(host=host, debug=debug):
        print "Unable to connect to the host."
        return

    if failed(connection.connect("daneel-ai/%i.%i.%i" % version)):
        print "Unable to connect to the host."
        return

    if failed(connection.login(username, password)):
        # Try creating the user..
        print "User did not exist, trying to create user."
        if failed(connection.account(username, password, "", "daneel-ai bot")):
            print "Username / Password incorrect."
            return

        if failed(connection.login(username, password)):
            print "Created username, but still couldn't login :/"
            return

    cache = Cache(Cache.key(host, username))
    return connection, cache

def createRuleSystem(rulesfile):
    rf = open(rulesfile)
    l = stripline(rf.readline())
    while l != "[Constraints]":
        l = stripline(rf.readline())
    cons = []
    l = stripline(rf.readline())
    while l != "[Rules]":
        if l != "": cons.append(l)
        l = stripline(rf.readline())
    rules = []
    l = stripline(rf.readline())
    while l != "[Functions]":
        if l != "": rules.append(l)
        l = stripline(rf.readline())
    funcs = {}
    exec("".join(rf.readlines()),funcs)

    return RuleSystem(cons,rules,funcs)

def stripline(line):
    if line[0] == "#": return ""
    return line.strip()

def addCacheToStore(cache,store):
    store.addConstraint(BoundConstraint("whoami",[cache.players[0].id]))
    for (k,v) in cache.objects.items():
        store.addConstraint(BoundConstraint("subtype",[k,v.subtype]))
        store.addConstraint(BoundConstraint("name",[k,v.name]))
        store.addConstraint(BoundConstraint("size",[k,v.size]))
        store.addConstraint(BoundConstraint("pos",(k,) + v.pos))
        store.addConstraint(BoundConstraint("vel",(k,) + v.vel))
        for child in v.contains:
            store.addConstraint(BoundConstraint("contains",[k,child]))
        if hasattr(v,"owner"):
            store.addConstraint(BoundConstraint("owner",(k,v.owner)))
        if hasattr(v,"resources"):
            for res in v.resources:
                store.addConstraint(BoundConstraint("resources",(k,)+res))

def createOrders(cache,rulesystem,connection):
    orders = rulesystem.findConstraint("order_move(int,int)")
    for order in orders:
        objid = int(order.args[0])
        destination = int(order.args[1])
        print "Moving to %s" % (cache.objects[destination].pos,)
        moveorder = findOrderDesc("Move")
        args = [0, objid, -1, moveorder.subtype, 0, [], destination]
        order = moveorder(*args)
        evt = cache.apply("orders","create after",objid,cache.orders[objid].head,order)
        tp.client.cache.apply(connection,evt,cache)
    orders = rulesystem.findConstraint("order_buildfleet(int,tuple,str)")
    for order in orders:
        objid = order.args[0]
        ships = list(order.args[1])
        name = order.args[2]
        print "Ordering fleet %s of %s" % (name,ships)
        buildorder = findOrderDesc("Build Fleet")
        args = [0, objid, -1, buildorder.subtype, 0, [], [[],ships], (len(name),name)]
        order = buildorder(*args)
        evt = cache.apply("orders","create after",objid,cache.orders[objid].head,order)
        tp.client.cache.apply(connection,evt,cache)
    orders = rulesystem.findConstraint("order_produce(int,tuple)")
    for order in orders:
        objid = order.args[0]
        toproduce = list(order.args[1])
        print "Producing %s" % toproduce
        order = findOrderDesc("Produce")
        args = [0, objid, -1, order.subtype, 0, [], [[],toproduce]]
        o = order(*args)
        evt = cache.apply("orders","create after",objid,cache.orders[objid].head,o)
        tp.client.cache.apply(connection,evt,cache)

def findOrderDesc(name):
    name = name.lower()
    for d in OrderDescs().values():
        if d._name.lower() == name:
            return d

def findDesign(cache,name):
    name = name.lower()
    for d in cache.designs.values():
        if d._name.lower() == name:
            return d

def gameLoop(rulesfile,turns=-1):
    connection, cache = connect()
    rulesystem = createRuleSystem(rulesfile)
    while turns != 0:
        turns = turns - 1
        print "Turn started!"
        print "Downloading objects."
        cache.update(connection,callback)

        addCacheToStore(cache,rulesystem)
        createOrders(cache,rulesystem,connection)
        #send buffers?

        rulesystem.clearStore()
        connection.turnfinished()
        waitfor = connection.time()
        print "Awaiting end of turn (%d s)..." % waitfor
        time.sleep(waitfor)

if __name__ == "__main__":
    parser = OptionParser(version="%prog " + ("%i.%i.%i" % version))
    parser.add_option("-f", "--file", dest="filename", default="rules-rfts",
                      help="read rules from FILENAME [default: %default]")
    parser.add_option("-n", "--numturns", dest="numturns", type="int", default=-1,
                      help="run for NUMTURNS turns [default: unlimited]")
    #verbosity? others?

    (options, args) = parser.parse_args()
    gameLoop(options.filename,turns=options.numturns)
