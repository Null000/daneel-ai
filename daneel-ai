#! /usr/bin/python

import time

import tp.client.threads
from tp.netlib.client import url2bits
from tp.netlib import Connection
from tp.netlib import failed, constants, objects
from tp.client.cache import Cache

from chr import ConstraintStore

version = (0, 0, 1)

def callback(*args, **kw):
    #print args, kw
    pass

def connect(uri='tp://daneel-ai:cannonfodder@localhost/tp'):
    debug = False

    host, username, game, password = url2bits(uri)
    if not game is None:
        username = "%s@%s" % (username, game)

    connection = Connection()

    # Download the entire universe
    if connection.setup(host=host, debug=debug):
        print "Unable to connect to the host."
        return

    if failed(connection.connect("daneel-ai/%i.%i.%i" % version)):
        print "Unable to connect to the host."
        return

    if failed(connection.login(username, password)):
        # Try creating the user..
        print "User did not exist, trying to create user."
        if failed(connection.account(username, password, "", "daneel-ai bot")):
            print "Username / Password incorrect."
            return

        if failed(connection.login(username, password)):
            print "Created username, but still couldn't login :/"
            return

    cache = Cache(Cache.key(host, username))
    return connection, cache

def createRuleSystem():
    #this will need to read rules dynamically etc later on
    return ConstraintStore(["subtype","name","size","pos","vel","contains"])

def addCacheToStore(cache,store):
    for (k,v) in cache.objects.items():
        store.add("subtype(%i,%i)" % (k,v.subtype))
        store.add("name(%i,%s)" % (k,v.name))
        store.add("size(%i,%i)" % (k,v.size))
        store.add("pos(%i,%i,%i,%i)" % ((k,) + v.pos))
        store.add("vel(%i,%i,%i,%i)" % ((k,) + v.vel))
        for child in v.contains:
            store.add("contains(%i,%i)" % (k,child))

def gameLoop():
    connection, cache = connect()
    rulesystem = createRuleSystem()
    while True:
        print "Turn started!"
        print "Downloading objects."
        cache.update(connection,callback)

        addCacheToStore(cache,rulesystem)
        print rulesystem
        #get results from store
        #create orders
        #send buffers?

        rulesystem.clear()
        waitfor = connection.time()
        print "Awaiting end of turn (%d s)..." % waitfor
        time.sleep(waitfor)

if __name__ == "__main__":
    gameLoop()

