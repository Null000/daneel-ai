[Modules]
basic
mod-risk

[Constraints]
myplanet(int,int)
enemyplanet(int,int)
neutralplanet(int)
weakling(int)
galaxyscore(int,int,tuple)
galaxyplanet(int,int)
expansiontarget(int,int,tuple)
maxtargetval(int,int)
expansion(int,int,int)
addarmies(int,int)
army(int)
needed(int,int)
search(int,int,tuple)
dosearch(int,int)
adjlist(int,tuple)*
#adjacentinlist(int,int)*
safeplanet(int)
totaltroops(int,int,tuple)
chain_move(int,int,int)

[Rules]
info @ turn(X) ==> print "Turn %s" % X

#calculate total strength
player(N) ==> N != 0 | totaltroops(N,0,())
planet(P) and owner(P,O) and armies(P,A) \ totaltroops(O,T,L) <=> P not in L | totaltroops(O,T+A,L+(P,))
cacheentered and totaltroops(P,PN,_) ==> print "Total strength of player %s: %s"%(P,PN)
cacheentered and whoami(Me) and totaltroops(Me,MeN,_) and totaltroops(P,PN,_) ==> MeN > PN * 1.25 and PN > 0 | weakling(P)

#more map calculations
adjlist(P,L) \ adjlist(P,()) <=> pass
startadj @ planet(P) ==> adjlist(P,())
filladj @ planet(P) and adjacent(P,O) \ adjlist(P,T) <=> O not in T | T2 = T + (O,); adjlist(P,T2)

#classify planets
myplanet @ whoami(Me) and owner(P,Me) \ planet(P) and armies(P,N) <=> myplanet(P,N)
neutralplanet @ owner(P,-1) \ planet(P) <=> neutralplanet(P)
enemyplanet @ whoami(Me) and owner(P,Owner) \ planet(P) and armies(P,N) <=> Me != Owner | enemyplanet(P,N)
findcentral @ cacheentered and myplanet(P,_) and adjlist(P,L) ==> allmine(L) | safeplanet(P)

#constellation bonus
#TODO: add more weight to planets completing (or breaking) a galaxy
#galaxy(G) \ contains(G,S) and contains(S,P) <=> galaxyplanet(G,P)
#galaxyscore(G,S,L) ==> print "Galaxy %i score: %i"%(G,S)
#galaxy(G) ==> galaxyscore(G,0,())
#galaxyplanet(G,P) and myplanet(P,N) \ galaxyscore(G,Sc,L) <=> P not in L | galaxyscore(G,Sc+N,L+(P,))
#galaxyplanet(G,P) and neutralplanet(P) \ galaxyscore(G,Sc,L) <=> P not in L | galaxyscore(G,Sc-1,L+(P,))
#galaxyplanet(G,P) and enemyplanet(P,N) \ galaxyscore(G,Sc,L) <=> P not in L | galaxyscore(G,Sc-N,L+(P,))

#start- and endpoint of armies flow
sourcearmiesrec @ addarmies(P,N) <=> N > 1 | army(P); addarmies(P,N-1)
sourcearmiesbase @ addarmies(P,1) <=> army(P)
sinkarmiesrec @ needed(P,N) and army(P) <=> N > 0 | needed(P,N-1)
sinkarmiesbase @ needed(_,0) <=> pass

#needs and availabilities
myplanet(P,N) ==> addarmies(P,N), needed(P,1)
neutralplanet(P) ==> needed(P,1)
enemyplanet(P,N) ==> needed(P,N+1)
enemyplanet(P,N) and adjacent(P2,P) ==> needed(P2,N/2)

#help those in need
#this is basically iterative deepening with the path kept in the third argument
cacheentered and army(P) ==> dosearch(P,1)
hopeless @ dosearch(P,4) <=> pass
startdepth @ dosearch(P,N) ==> search(P,N,(P,))
deepen @ dosearch(P,N) <=> dosearch(P,N+1)
search(P,0,L) and needed(P,N) and army(S) and dosearch(S,_) <=> L[0] == S | T = L[1]; chain_move(S,T,1); needed(P,N-1)
adjacent(P,P2) and search(P,N,L) ==> P2 not in L and N > 0 | search(P2,N-1,L+(P2,))
search(P,_,_) <=> pass

#the attack is the best defence
adjacent(P,P2) and enemyplanet(P2) \ army(P) <=> chain_move(P,P2,1)

#reinforce
enemyplanet(Pl,_) and owner(P,Pl) and adjacent(MyPl,Pl) and myplanet(MyPl,_) \ weakling(P) and reinforcements(N) <=> order_reinforce(P,N/2); reinforcements(N - N/2)
cacheentered and myplanet(P,_) \ reinforcements(N) and needed(P,Num) <=> N > 0 | needed(P,Num-1); order_reinforce(P,1); army(P); reinforcements(N-1)
cacheentered and reinforcements(N) ==> N > 0 | rand_reinforce(N)

chaincollapse @ chain_move(From,To,N1) and chain_move(From,To,N2) <=> chain_move(From,To,N1+N2)
chainrecurse @ cacheentered \ chain_move(From,To,Number) <=> Number > 3 | order_move(From,To,3); chain_move(From,To,Number-3)
chainbase @ cacheentered \ chain_move(From,To,Number) <=> order_move(From,To,Number)

[Functions]
import random
def allmine(planets):
    me = cache.players[0].id
    return all([cache.objects[x].Ownership.Owner.id == me for x in planets])

def distribute(origin,troops,planetlist):
    l = len(planetlist)
    perplanet = troops/l
    rest = troops % l
    dist = [0]*l
    while rest > 0:
        rest = rest - 1
        c = random.randint(0,l-1)
        dist[c] = dist[c] + 1
    for (i,p) in enumerate(planetlist):
        if dist[i] > 0:
            rulesystem.addConstraint("order_move(%i,%i,%i)"%(origin,p,dist[i]))

def rand_reinforce(N):
    ps = set([x.args[0] for x in rulesystem.findConstraint("myplanet(int,int)")])
    safeps = set([x.args[0] for x in rulesystem.findConstraint("safeplanet(int)")])
    ps = tuple(ps - safeps)
    if ps == (): return
    while N > 0:
        N = N - 1
        c = random.choice(ps)
        rulesystem.addConstraint("order_reinforce(%i,%i)"%(c,1))
